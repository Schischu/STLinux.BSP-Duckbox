*** linux-sh4-2.6.32.46_stm24_0209.orig/drivers/media/dvb/dvb-core/dmxdev.c	2011-11-24 22:22:24.000000000 +0200
--- linux-sh4/drivers/media/dvb/dvb-core/dmxdev.c	2011-11-24 23:02:30.636994000 +0200
***************
*** 132,142 ****
  	if (mutex_lock_interruptible(&dmxdev->mutex))
  		return -ERESTARTSYS;
  
- 	if (dmxdev->exit) {
- 		mutex_unlock(&dmxdev->mutex);
- 		return -ENODEV;
- 	}
- 
  	if ((file->f_flags & O_ACCMODE) == O_RDWR) {
  		if (!(dmxdev->capabilities & DMXDEV_CAP_DUPLEX)) {
  			mutex_unlock(&dmxdev->mutex);
--- 132,137 ----
***************
*** 176,182 ****
  		dmxdev->demux->disconnect_frontend(dmxdev->demux);
  		dmxdev->demux->connect_frontend(dmxdev->demux, front);
  	}
- 	dvbdev->users++;
  	mutex_unlock(&dmxdev->mutex);
  	return 0;
  }
--- 171,176 ----
***************
*** 204,219 ****
  			vfree(mem);
  		}
  	}
! 	/* TODO */
! 	dvbdev->users--;
! 	if(dvbdev->users==-1 && dmxdev->exit==1) {
! 		fops_put(file->f_op);
! 		file->f_op = NULL;
! 		mutex_unlock(&dmxdev->mutex);
! 		wake_up(&dvbdev->wait_queue);
! 	} else
! 		mutex_unlock(&dmxdev->mutex);
! 
  	return 0;
  }
  
--- 198,204 ----
  			vfree(mem);
  		}
  	}
! 	mutex_unlock(&dmxdev->mutex);
  	return 0;
  }
  
***************
*** 230,240 ****
  		return -EINVAL;
  	if (mutex_lock_interruptible(&dmxdev->mutex))
  		return -ERESTARTSYS;
- 
- 	if (dmxdev->exit) {
- 		mutex_unlock(&dmxdev->mutex);
- 		return -ENODEV;
- 	}
  	ret = dmxdev->demux->write(dmxdev->demux, buf, count);
  	mutex_unlock(&dmxdev->mutex);
  	return ret;
--- 215,220 ----
***************
*** 246,254 ****
  	struct dvb_device *dvbdev = file->private_data;
  	struct dmxdev *dmxdev = dvbdev->priv;
  
- 	if (dmxdev->exit)
- 		return -ENODEV;
- 
  	return dvb_dmxdev_buffer_read(&dmxdev->dvr_buffer,
  				      file->f_flags & O_NONBLOCK,
  				      buf, count, ppos);
--- 226,231 ----
***************
*** 763,770 ****
  	dvb_dmxdev_filter_state_set(dmxdevfilter, DMXDEV_STATE_ALLOCATED);
  	init_timer(&dmxdevfilter->timer);
  
- 	dvbdev->users++;
- 
  	mutex_unlock(&dmxdev->mutex);
  	return 0;
  }
--- 740,745 ----
***************
*** 949,965 ****
  	struct dmxdev_filter *dmxdevfilter = file->private_data;
  	int ret;
  
! 	if (mutex_lock_interruptible(&dmxdevfilter->mutex))
! 		return -ERESTARTSYS;
  
- 	if (dmxdevfilter->type == DMXDEV_TYPE_SEC)
  		ret = dvb_dmxdev_read_sec(dmxdevfilter, file, buf, count, ppos);
  	else
  		ret = dvb_dmxdev_buffer_read(&dmxdevfilter->buffer,
  					     file->f_flags & O_NONBLOCK,
  					     buf, count, ppos);
  
- 	mutex_unlock(&dmxdevfilter->mutex);
  	return ret;
  }
  
--- 924,941 ----
  	struct dmxdev_filter *dmxdevfilter = file->private_data;
  	int ret;
  
! 	if (dmxdevfilter->type == DMXDEV_TYPE_SEC) {
! 		if (mutex_lock_interruptible(&dmxdevfilter->mutex))
! 			return -ERESTARTSYS;
  
  		ret = dvb_dmxdev_read_sec(dmxdevfilter, file, buf, count, ppos);
+ 		mutex_unlock(&dmxdevfilter->mutex);
+ 	}
  	else
  		ret = dvb_dmxdev_buffer_read(&dmxdevfilter->buffer,
  					     file->f_flags & O_NONBLOCK,
  					     buf, count, ppos);
  
  	return ret;
  }
  
***************
*** 1119,1139 ****
  	struct dmxdev_filter *dmxdevfilter = file->private_data;
  	struct dmxdev *dmxdev = dmxdevfilter->dev;
  
! 	int ret;
! 
! 	ret = dvb_dmxdev_filter_free(dmxdev, dmxdevfilter);
! 
! 	mutex_lock(&dmxdev->mutex);
! 	dmxdev->dvbdev->users--;
! 	if(dmxdev->dvbdev->users==1 && dmxdev->exit==1) {
! 		fops_put(file->f_op);
! 		file->f_op = NULL;
! 		mutex_unlock(&dmxdev->mutex);
! 		wake_up(&dmxdev->dvbdev->wait_queue);
! 	} else
! 		mutex_unlock(&dmxdev->mutex);
! 
! 	return ret;
  }
  
  static const struct file_operations dvb_demux_fops = {
--- 1095,1101 ----
  	struct dmxdev_filter *dmxdevfilter = file->private_data;
  	struct dmxdev *dmxdev = dmxdevfilter->dev;
  
! 	return dvb_dmxdev_filter_free(dmxdev, dmxdevfilter);
  }
  
  static const struct file_operations dvb_demux_fops = {
***************
*** 1217,1223 ****
  static struct dvb_device dvbdev_dvr = {
  	.priv = NULL,
  	.readers = 1,
- 	.users = 1,
  	.fops = &dvb_dvr_fops
  };
  
--- 1179,1184 ----
***************
*** 1255,1270 ****
  
  void dvb_dmxdev_release(struct dmxdev *dmxdev)
  {
- 	dmxdev->exit=1;
- 	if (dmxdev->dvbdev->users > 1) {
- 		wait_event(dmxdev->dvbdev->wait_queue,
- 				dmxdev->dvbdev->users==1);
- 	}
- 	if (dmxdev->dvr_dvbdev->users > 1) {
- 		wait_event(dmxdev->dvr_dvbdev->wait_queue,
- 				dmxdev->dvr_dvbdev->users==1);
- 	}
- 
  	dvb_unregister_device(dmxdev->dvbdev);
  	dvb_unregister_device(dmxdev->dvr_dvbdev);
  
--- 1216,1221 ----
*** linux-sh4-2.6.32.46_stm24_0209.orig/drivers/media/dvb/dvb-core/dmxdev.h	2009-12-03 05:51:21.000000000 +0200
--- linux-sh4/drivers/media/dvb/dvb-core/dmxdev.h	2011-11-24 23:02:30.567871000 +0200
***************
*** 99,105 ****
  	int filternum;
  	int capabilities;
  
- 	unsigned int exit:1;
  #define DMXDEV_CAP_DUPLEX 1
  	struct dmx_frontend *dvr_orig_fe;
  
--- 99,104 ----
*** linux-sh4-2.6.32.46_stm24_0209.orig/drivers/media/dvb/dvb-core/dvb_ca_en50221.c	2009-12-03 05:51:21.000000000 +0200
--- linux-sh4/drivers/media/dvb/dvb-core/dvb_ca_en50221.c	2011-11-24 23:02:30.528633000 +0200
***************
*** 41,54 ****
  #include "dvb_ca_en50221.h"
  #include "dvb_ringbuffer.h"
  
! static int dvb_ca_en50221_debug;
  
  module_param_named(cam_debug, dvb_ca_en50221_debug, int, 0644);
  MODULE_PARM_DESC(cam_debug, "enable verbose debug messages");
  
  #define dprintk if (dvb_ca_en50221_debug) printk
  
! #define INIT_TIMEOUT_SECS 10
  
  #define HOST_LINK_BUF_SIZE 0x200
  
--- 41,55 ----
  #include "dvb_ca_en50221.h"
  #include "dvb_ringbuffer.h"
  
! static int dvb_ca_en50221_debug = 0;
  
  module_param_named(cam_debug, dvb_ca_en50221_debug, int, 0644);
  MODULE_PARM_DESC(cam_debug, "enable verbose debug messages");
  
  #define dprintk if (dvb_ca_en50221_debug) printk
  
! static int INIT_TIMEOUT_SECS = 10;
! static int WAIT_FREE_TIMEOUT_SECS = 3;
  
  #define HOST_LINK_BUF_SIZE 0x200
  
***************
*** 117,124 ****
--- 118,134 ----
  	/* buffer for incoming packets */
  	struct dvb_ringbuffer rx_buffer;
  
+ 	/* wait queues for read() and write() operations */
+ 	wait_queue_head_t wait_queue;
+ 
  	/* timer used during various states of the slot */
  	unsigned long timeout;
+ 
+ 	int	pollTime;
+ 
+ 	int	waitWrite;
+ 	int	camPollin;
+ 	int	camPollout;
  };
  
  /* Private CA-interface information */
***************
*** 130,135 ****
--- 140,149 ----
  	/* the DVB device */
  	struct dvb_device *dvbdev;
  
+ 	/* the DVB CI devices */
+ 	struct dvb_device *dvbdev_ci[2];
+ 	int slot_states[2];
+ 
  	/* Flags describing the interface (DVB_CA_FLAG_*) */
  	u32 flags;
  
***************
*** 145,150 ****
--- 159,167 ----
  	/* PID of the monitoring thread */
  	struct task_struct *thread;
  
+ 	/* since we have multiple (logical) devices, we should protect them */
+ 	struct mutex io_mutex;
+ 
  	/* Flag indicating if the CA device is open */
  	unsigned int open:1;
  
***************
*** 162,167 ****
--- 179,189 ----
  static int dvb_ca_en50221_read_data(struct dvb_ca_private *ca, int slot, u8 * ebuf, int ecount);
  static int dvb_ca_en50221_write_data(struct dvb_ca_private *ca, int slot, u8 * ebuf, int ecount);
  
+ // Hack
+ struct proc_dir_entry*  ci_dir;
+ 
+ struct dvb_ca_slot *ci0;
+ struct dvb_ca_slot *ci1;
  
  /**
   * Safely find needle in haystack.
***************
*** 592,597 ****
--- 614,621 ----
  
  	dprintk("%s\n", __func__);
  
+     mutex_lock(&ca->io_mutex);
+ 
  	/* check if we have space for a link buf in the rx_buffer */
  	if (ebuf == NULL) {
  		int buf_free;
***************
*** 664,669 ****
--- 688,694 ----
  	if ((status = ca->pub->read_cam_control(ca->pub, slot, CTRLIF_STATUS)) < 0)
  		goto exit;
  	if (status & STATUSREG_RE) {
+ 		printk("read on slot %d failed ->state now linkinit\n", slot);
  		ca->slot_info[slot].slot_state = DVB_CA_SLOTSTATE_LINKINIT;
  		status = -EIO;
  		goto exit;
***************
*** 685,695 ****
--- 710,722 ----
  
  	/* wake up readers when a last_fragment is received */
  	if ((buf[1] & 0x80) == 0x00) {
+ 		wake_up_interruptible(&ca->slot_info[slot].wait_queue);
  		wake_up_interruptible(&ca->wait_queue);
  	}
  	status = bytes_read;
  
  exit:
+     mutex_unlock(&ca->io_mutex);
  	return status;
  }
  
***************
*** 718,723 ****
--- 745,752 ----
  	if (bytes_write > ca->slot_info[slot].link_buf_size)
  		return -EINVAL;
  
+     mutex_lock(&ca->io_mutex);
+ 
  	/* it is possible we are dealing with a single buffer implementation,
  	   thus if there is data available for read or if there is even a read
  	   already in progress, we do nothing but awake the kernel thread to
***************
*** 763,768 ****
--- 792,798 ----
  	if ((status = ca->pub->read_cam_control(ca->pub, slot, CTRLIF_STATUS)) < 0)
  		goto exit;
  	if (status & STATUSREG_WE) {
+ 		printk("write on slot %d failed ->state now linkinit\n", slot);
  		ca->slot_info[slot].slot_state = DVB_CA_SLOTSTATE_LINKINIT;
  		status = -EIO;
  		goto exit;
***************
*** 776,781 ****
--- 806,812 ----
  	ca->pub->write_cam_control(ca->pub, slot, CTRLIF_COMMAND, IRQEN);
  
  exitnowrite:
+     mutex_unlock(&ca->io_mutex);
  	return status;
  }
  EXPORT_SYMBOL(dvb_ca_en50221_camchange_irq);
***************
*** 801,806 ****
--- 832,838 ----
  
  	/* need to wake up all processes to check if they're now
  	   trying to write to a defunct CAM */
+ 	wake_up_interruptible(&ca->slot_info[slot].wait_queue);
  	wake_up_interruptible(&ca->wait_queue);
  
  	dprintk("Slot %i shutdown\n", slot);
***************
*** 1039,1044 ****
--- 1071,1084 ----
  				break;
  
  			case DVB_CA_SLOTSTATE_VALIDATE:
+ 				printk("DVB_CA_SLOTSTATE_VALIDATE %d\n", slot);
+ 
+ 				/*GustavGans: it seems that the validation process comes to early
+ 				  if MPEG stream is turned on and MPEG bypassing is disabled
+ 				  (the first tuple is invalid) */
+ 				mdelay(100);
+ 
+ 
  				if (dvb_ca_en50221_parse_attributes(ca, slot) != 0) {
  					/* we need this extra check for annoying interfaces like the budget-av */
  					if ((!(ca->flags & DVB_CA_EN50221_FLAG_IRQ_CAMCHANGE)) &&
***************
*** 1138,1143 ****
--- 1178,1187 ----
  				// poll slots for data
  				pktcount = 0;
  				while ((status = dvb_ca_en50221_read_data(ca, slot, NULL, 0)) > 0) {
+ 					mutex_lock(&ca->io_mutex);
+ 					ca->slot_info[slot].camPollin = 1;
+ 					mutex_unlock(&ca->io_mutex);
+ 
  					if (!ca->open)
  						break;
  
***************
*** 1155,1160 ****
--- 1199,1221 ----
  						break;
  					}
  				}
+ 
+ 				/* wg pollwri: wake up poll waiters if there is nothing todo, so he can write some data */
+ 		 		if ((status = ca->pub->read_cam_control(ca->pub, slot, CTRLIF_STATUS)) >= 0)
+ 		 		{
+ 	            			if (!(status & STATUSREG_DA))
+ 						if (!(status & STATUSREG_RE))
+ 		           				if (status & STATUSREG_FR)
+ 			   				{
+ 								mutex_lock(&ca->io_mutex);
+ 								ca->slot_info[slot].camPollout = 1;
+ 								mutex_unlock(&ca->io_mutex);
+ 
+ 								wake_up_interruptible(&ca->slot_info[slot].wait_queue);
+ 								wake_up_interruptible(&ca->wait_queue);
+ 							}
+ 		 		}
+ 
  				break;
  			}
  
***************
*** 1193,1198 ****
--- 1254,1262 ----
  
  	switch (cmd) {
  	case CA_RESET:
+ 
+ // Resetting only requested slot is good idea maybe :-/
+ #ifdef alt
  		for (slot = 0; slot < ca->slot_count; slot++) {
  			mutex_lock(&ca->slot_info[slot].slot_lock);
  			if (ca->slot_info[slot].slot_state != DVB_CA_SLOTSTATE_NONE) {
***************
*** 1204,1209 ****
--- 1268,1288 ----
  			}
  			mutex_unlock(&ca->slot_info[slot].slot_lock);
  		}
+ #else
+ 		for (slot = 0; slot < ca->slot_count; slot++) {
+ 			int mySlot = ((int) parg);
+ 
+ 			dprintk("mySlot = %d, searched %d\n", mySlot, slot);
+ 
+ 			if (mySlot != slot)
+ 			    continue;
+ 
+ 			dprintk("->reset %d\n", mySlot);
+ 
+ 			//dagobert: rest will be done in loop
+ 			ca->slot_info[slot].slot_state = DVB_CA_SLOTSTATE_UNINITIALISED;
+ 		}
+ #endif
  		ca->next_read_slot = 0;
  		dvb_ca_en50221_thread_wakeup(ca);
  		break;
***************
*** 1345,1353 ****
--- 1424,1464 ----
  	status = count + 2;
  
  exit:
+ 	ca->slot_info[slot].waitWrite = 0;
  	return status;
  }
  
+ static int dvb_ca_en50221_io_read_condition_for_slot(struct dvb_ca_private *ca, int slot)
+ {
+ 	int idx;
+ 	size_t fraglen;
+ 	int connection_id = -1;
+ 	int found = 0;
+ 	u8 hdr[2];
+ 
+ 	if (ca->slot_info[slot].slot_state != DVB_CA_SLOTSTATE_RUNNING)
+ 		return 0;
+ 
+ 	if (ca->slot_info[slot].rx_buffer.data == NULL) {
+ 		return 0;
+ 	}
+ 
+ 	idx = dvb_ringbuffer_pkt_next(&ca->slot_info[slot].rx_buffer, -1, &fraglen);
+ 	while (idx != -1) {
+ 		dvb_ringbuffer_pkt_read(&ca->slot_info[slot].rx_buffer, idx, 0, hdr, 2);
+ 		if (connection_id == -1)
+ 			connection_id = hdr[0];
+ 		if ((hdr[0] == connection_id) && ((hdr[1] & 0x80) == 0)) {
+ 			found = 1;
+ 			break;
+ 		}
+ 
+ 		idx = dvb_ringbuffer_pkt_next(&ca->slot_info[slot].rx_buffer, idx, &fraglen);
+ 	}
+ 
+ 	return found;
+ }
+ 
  
  /**
   * Condition for waking up in dvb_ca_en50221_io_read_condition
***************
*** 1421,1426 ****
--- 1532,1538 ----
  	size_t fraglen;
  	int pktlen;
  	int dispose = 0;
+ 	int ci_slot = -1;
  
  	dprintk("%s\n", __func__);
  
***************
*** 1428,1433 ****
--- 1540,1630 ----
  	if (count < 2)
  		return -EINVAL;
  
+         if (dvbdev == ca->dvbdev_ci[0])
+ 		ci_slot = 0;
+ 	else
+         if (dvbdev == ca->dvbdev_ci[1])
+ 		ci_slot = 1;
+ 
+ 	if (ci_slot != -1)
+ 	{
+ 		/* is there something to read ? */
+ 		if ((status = dvb_ca_en50221_io_read_condition_for_slot(ca, ci_slot)) == 0) {
+ 
+ 		   /* if we're in nonblocking mode, exit immediately */
+ 		   if (file->f_flags & O_NONBLOCK)
+ 		   {
+ 			   return -EWOULDBLOCK;
+ 		   }
+ 
+ 		   /* wait for some data */
+ 		   status = wait_event_interruptible(ca->slot_info[ci_slot].wait_queue,
+ 						     dvb_ca_en50221_io_read_condition_for_slot
+ 						     (ca, ci_slot));
+ 
+ 		   dprintk("status = %d\n", status);	
+ 
+ 		}
+ 
+ 		if ((status < 0)) {
+ 			return status;
+ 		}
+ 
+ 		slot = ci_slot;
+ 
+ 		idx = dvb_ringbuffer_pkt_next(&ca->slot_info[slot].rx_buffer, -1, &fraglen);
+ 		pktlen = 2;
+ 		do {
+ 			if (idx == -1) {
+ 				printk("dvb_ca adapter %d: BUG: read packet ended before last_fragment encountered\n", ca->dvbdev->adapter->num);
+ 
+ 		                printk("pktlen = %d, fraglen = %d, count = %d, con_id = %d\n", pktlen, fraglen, count, connection_id);	
+ 		
+ 				status = -EIO;
+ 				goto exit;
+ 			}
+ 
+ 			dvb_ringbuffer_pkt_read(&ca->slot_info[slot].rx_buffer, idx, 0, hdr, 2);
+ 			if (connection_id == -1)
+ 				connection_id = hdr[0];
+ 			if (hdr[0] == connection_id) {
+ 				if (pktlen < count) {
+ 					if ((pktlen + fraglen - 2) > count) {
+ 						fraglen = count - pktlen;
+ 					} else {
+ 						fraglen -= 2;
+ 					}
+ 
+ 					if ((status = dvb_ringbuffer_pkt_read(&ca->slot_info[slot].rx_buffer, idx, 2,
+ 									      buf + pktlen, fraglen)) < 0) {
+ 						goto exit;
+ 					}
+ 					pktlen += fraglen;
+ 				}
+ 
+ 				if ((hdr[1] & 0x80) == 0)
+ 					last_fragment = 1;
+ 				dispose = 1;
+ 			}
+ 
+ 			idx2 = dvb_ringbuffer_pkt_next(&ca->slot_info[slot].rx_buffer, idx, &fraglen);
+ 			if (dispose)
+ 				dvb_ringbuffer_pkt_dispose(&ca->slot_info[slot].rx_buffer, idx);
+ 			idx = idx2;
+ 			dispose = 0;
+ 		} while (!last_fragment);
+ 
+ 		hdr[0] = slot;
+ 		hdr[1] = connection_id;
+ 
+ 		if ((status = copy_to_user(buf, hdr, 2)) != 0)
+ 			goto exit;
+ 
+ 		status = pktlen;
+ 
+ 		return status;
+ 	}
+ 
  	/* wait for some data */
  	if ((status = dvb_ca_en50221_io_read_condition(ca, &result, &slot)) == 0) {
  
***************
*** 1584,1589 ****
--- 1781,1907 ----
  	unsigned int mask = 0;
  	int slot;
  	int result = 0;
+ 	int ci_slot = -1;
+ 
+ #ifdef x_debug
+ 	//dprintk("%s\n", __FUNCTION__);
+ #endif
+ 	/* Dagobert */
+         if (dvbdev == ca->dvbdev_ci[0])
+ 		ci_slot = 0;
+ 	else
+         if (dvbdev == ca->dvbdev_ci[1])
+ 		ci_slot = 1;
+ 
+ 	if (ci_slot != -1)
+ 	{
+ #ifdef x_debug
+ 		//dprintk("CI Slot = %d\n", ci_slot);
+ 		//dprintk("%d ", ci_slot);
+ #endif
+ 
+ 		/* get the desired slot from list and check for changed status
+ 		 * ->e2 seems to want this only on removal of module and on errors
+ 		 */
+ 		if (ca->slot_info[ci_slot].slot_state != ca->slot_states[ci_slot])
+ 		{
+ #ifdef x_debug
+ 			//dprintk("old %d, new %d (type %d)\n", ca->slot_states[ci_slot], ca->slot_info[ci_slot].slot_state, ca->slot_info[ci_slot].camchange_type);
+ #endif
+ 
+ 			ca->slot_states[ci_slot] = ca->slot_info[ci_slot].slot_state;
+ 
+ 			if (ca->slot_info[ci_slot].camchange_type == DVB_CA_EN50221_CAMCHANGE_REMOVED)
+ 			{
+ 			   mask |= POLLPRI;
+ #ifdef x_debug
+ 			   printk("return POLLPRI on slot %d ->removed\n", ci_slot);
+ #endif
+ 
+ 			   return mask;
+ 			} else
+ 			if (ca->slot_info[ci_slot].camchange_type == DVB_CA_EN50221_CAMCHANGE_INSERTED)
+ 			{
+ 			   if (ca->slot_info[ci_slot].slot_state == DVB_CA_SLOTSTATE_RUNNING)
+ 			   {
+ 			   	mask |= POLLPRI;
+ #ifdef x_debug
+ 			   printk("return POLLPRI on slot %d ->inserted\n", ci_slot);
+ #endif
+ 
+ 			   	return mask;
+ 			   }
+ 			}
+ 		}
+ 
+ 		mutex_lock(&ca->io_mutex);
+ 		if(ca->slot_info[ci_slot].camPollout)
+ 			mask |= POLLOUT;
+ 
+ 		if(ca->slot_info[ci_slot].camPollin)
+ 			mask |= POLLIN;
+ 
+ 		ca->slot_info[ci_slot].camPollin = 0;
+ 		ca->slot_info[ci_slot].camPollout = 0;
+ 		mutex_unlock(&ca->io_mutex);
+ 
+ 		if(mask != 0)
+ 		{
+ 			return mask;
+ 		}
+ 
+ 		/* wait for something to happen */
+ 		poll_wait(file, &ca->slot_info[ci_slot].wait_queue, wait);
+ 
+ 		/* get the desired slot from list and check for changed status
+ 		 * ->e2 seems to want this only on removal of module and on errors
+ 		 */
+ 		if (ca->slot_info[ci_slot].slot_state != ca->slot_states[ci_slot])
+ 		{
+ #ifdef x_debug
+ 			dprintk("old %d, new %d (type %d)\n", ca->slot_states[ci_slot], ca->slot_info[ci_slot].slot_state, ca->slot_info[ci_slot].camchange_type);
+ #endif
+ 
+ 			ca->slot_states[ci_slot] = ca->slot_info[ci_slot].slot_state;
+ 
+ 			if (ca->slot_info[ci_slot].camchange_type == DVB_CA_EN50221_CAMCHANGE_REMOVED)
+ 			{
+ 			   mask |= POLLPRI;
+ #ifdef x_debug
+ 			   printk("return POLLPRI on slot %d ->removed\n", ci_slot);
+ #endif
+ 
+ 			   return mask;
+ 			} else
+ 			if (ca->slot_info[ci_slot].camchange_type == DVB_CA_EN50221_CAMCHANGE_INSERTED)
+ 			{
+ 			   if (ca->slot_info[ci_slot].slot_state == DVB_CA_SLOTSTATE_RUNNING)
+ 			   {
+ 			   	mask |= POLLPRI;
+ #ifdef x_debug
+ 			   printk("return POLLPRI on slot %d ->inserted\n", ci_slot);
+ #endif
+ 
+ 			   	return mask;
+ 			   }
+ 			}
+ 		}
+ 
+ 		mutex_lock(&ca->io_mutex);
+ 		if(ca->slot_info[ci_slot].camPollout)
+ 			mask |= POLLOUT;
+ 
+ 		if(ca->slot_info[ci_slot].camPollin)
+ 			mask |= POLLIN;
+ 
+ 		ca->slot_info[ci_slot].camPollin = 0;
+ 		ca->slot_info[ci_slot].camPollout = 0;
+ 		mutex_unlock(&ca->io_mutex);
+ 
+ 		return mask;
+ 	}
+ 	
+ 	/* normal caN handling */
  
  	dprintk("%s\n", __func__);
  
***************
*** 1625,1630 ****
--- 1943,1964 ----
  	.fops = &dvb_ca_fops,
  };
  
+ static struct dvb_device dvbdev_ci[2] = {
+ {
+ 	.priv = NULL,
+ 	.users = 1,
+ 	.readers = 1,
+ 	.writers = 1,
+ 	.fops = &dvb_ca_fops,
+ },
+ {
+ 	.priv = NULL,
+ 	.users = 1,
+ 	.readers = 1,
+ 	.writers = 1,
+ 	.fops = &dvb_ca_fops,
+ }};
+ 
  
  /* ******************************************************************************** */
  /* Initialisation/shutdown functions */
***************
*** 1664,1669 ****
--- 1998,2006 ----
  		ret = -ENOMEM;
  		goto error;
  	}
+ 
+     mutex_init(&ca->io_mutex);
+ 
  	init_waitqueue_head(&ca->wait_queue);
  	ca->open = 0;
  	ca->wakeup = 0;
***************
*** 1678,1687 ****
--- 2015,2033 ----
  	/* now initialise each slot */
  	for (i = 0; i < slot_count; i++) {
  		memset(&ca->slot_info[i], 0, sizeof(struct dvb_ca_slot));
+ 
+ 		init_waitqueue_head(&ca->slot_info[i].wait_queue);
  		ca->slot_info[i].slot_state = DVB_CA_SLOTSTATE_NONE;
  		atomic_set(&ca->slot_info[i].camchange_count, 0);
  		ca->slot_info[i].camchange_type = DVB_CA_EN50221_CAMCHANGE_REMOVED;
  		mutex_init(&ca->slot_info[i].slot_lock);
+ 
+ 		/* add a ci device entry */
+ 	        ret = dvb_register_device(dvb_adapter, &ca->dvbdev_ci[i], &dvbdev_ci[i], ca, DVB_DEVICE_CI);
+ 		ca->slot_states[i] = DVB_CA_EN50221_CAMCHANGE_REMOVED;
+ 	        if (ret)
+ 		    printk("error creating ci device for slot %d\n", i);
+ 
  	}
  
  	if (signal_pending(current)) {
*** linux-sh4-2.6.32.46_stm24_0209.orig/drivers/media/dvb/dvb-core/dvbdev.c	2009-12-03 05:51:21.000000000 +0200
--- linux-sh4/drivers/media/dvb/dvb-core/dvbdev.c	2011-11-24 23:02:30.594870000 +0200
***************
*** 47,53 ****
  
  static const char * const dnames[] = {
  	"video", "audio", "sec", "frontend", "demux", "dvr", "ca",
! 	"net", "osd"
  };
  
  #ifdef CONFIG_DVB_DYNAMIC_MINORS
--- 47,53 ----
  
  static const char * const dnames[] = {
  	"video", "audio", "sec", "frontend", "demux", "dvr", "ca",
! 	"net", "osd", "ci"
  };
  
  #ifdef CONFIG_DVB_DYNAMIC_MINORS
*** linux-sh4-2.6.32.46_stm24_0209.orig/drivers/media/dvb/dvb-core/dvbdev.h	2009-12-03 05:51:21.000000000 +0200
--- linux-sh4/drivers/media/dvb/dvb-core/dvbdev.h	2011-11-24 23:02:30.602870000 +0200
***************
*** 47,52 ****
--- 47,53 ----
  #define DVB_DEVICE_CA         6
  #define DVB_DEVICE_NET        7
  #define DVB_DEVICE_OSD        8
+ #define DVB_DEVICE_CI         9
  
  #define DVB_DEFINE_MOD_OPT_ADAPTER_NR(adapter_nr) \
  	static short adapter_nr[] = \
*** linux-sh4-2.6.32.46_stm24_0209.orig/include/linux/dvb/video.h	2009-12-03 05:51:21.000000000 +0200
--- linux-sh4/include/linux/dvb/video.h	2011-11-25 00:08:20.462597435 +0200
***************
*** 120,125 ****
--- 120,131 ----
  		struct {
  			__u32 data[16];
  		} raw;
+ 
+ 		struct {
+ 			unsigned int    option; /* really dvb_option_t but like this so don't modify kernel sources too much */
+ 			unsigned int    value;
+ 		} option;
+ 
  	};
  };
  
